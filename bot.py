import telebot
import os
import openai

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å OpenAI

if not TOKEN:
    print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

bot = telebot.TeleBot(TOKEN)

# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üòä")

@bot.message_handler(commands=['hello'])
def hello(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Render üòä")

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Å OpenAI (–µ—Å–ª–∏ –∫–ª—é—á –∑–∞–¥–∞–Ω)
@bot.message_handler(commands=['ask'])
def ask_openai(message):
    if not OPENAI_API_KEY:
        bot.send_message(message.chat.id, "OpenAI API –∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    question = message.text.replace("/ask", "").strip()
    if not question:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    try:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=question,
            max_tokens=100
        )
        answer = response.choices[0].text.strip()
        bot.send_message(message.chat.id, answer)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")

# ====== –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(func=lambda m: True)
def echo_all(message):
    bot.send_message(message.chat.id, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")

# ====== –ó–∞–ø—É—Å–∫ ======
print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
bot.infinity_polling()
